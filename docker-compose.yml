version: '3'
services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=application
      - MYSQL_PASSWORD=application
      - MYSQL_DATABASE=hhplus
    volumes:
      - ./data/mysql/:/var/lib/mysql

  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-exporter
    ports:
      - "9104:9104"
    command:
      - "--mysqld.username=root:root"
      - "--mysqld.address=host.docker.internal:3306"
    depends_on:
      - mysql

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  redis_exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis

  k6:
    image: grafana/k6:latest
    container_name: k6
    volumes:
      - ./k6:/scripts
#    command: run /scripts/product-best-test.js
#    command: run /scripts/coupon-issue-test.js
    depends_on:
      - influxdb
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config:/etc/prometheus
      - ./prometheus/volume:/prometheus/data
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/volume:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      # Kafka 노드의 고유 ID
      - KAFKA_CFG_NODE_ID=0
      # Kafka 노드가 수행할 역할(브로커와 컨트롤러 모두 수행)
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      # Kafka가 수신할 리스너 설정
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      # 클라이언트에게 알릴 리스너 주소
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      # 각 리스너의 보안 프로토콜 매핑
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      # 컨트롤러 쿼럼 정보 (ID@호스트:포트)
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # 컨트롤러 통신에 사용할 리스너 이름
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - ./data/kafka_data:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

networks:
  default:
    driver: bridge
